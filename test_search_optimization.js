#!/usr/bin/env node

/**
 * Test script ƒë·ªÉ ki·ªÉm tra t·ªëi ∆∞u h√≥a search API
 * Ki·ªÉm tra xem k·∫øt qu·∫£ tr√πng v·ªõi ticker c√≥ hi·ªÉn th·ªã ƒë·∫ßu ti√™n kh√¥ng
 */

const axios = require('axios');

const BASE_URL = 'http://localhost:5001'; // Thay ƒë·ªïi port n·∫øu c·∫ßn

class SearchOptimizationTest {
  constructor() {
    this.testResults = [];
  }

  async runTest(testName, testFunction) {
    try {
      console.log(`\nüß™ Testing: ${testName}`);
      await testFunction();
      console.log(`‚úÖ ${testName} - PASSED`);
      this.testResults.push({ test: testName, status: 'PASSED' });
    } catch (error) {
      console.log(`‚ùå ${testName} - FAILED: ${error.message}`);
      this.testResults.push({ test: testName, status: 'FAILED', error: error.message });
    }
  }

  async testExactTickerMatch() {
    // Test 1: T√¨m ki·∫øm "FPT" - FPT ph·∫£i xu·∫•t hi·ªán ƒë·∫ßu ti√™n
    const response = await axios.get(`${BASE_URL}/api/tickers/search?query=FPT&limit=10`);
    
    if (response.status !== 200 || !response.data.success) {
      throw new Error('API request failed');
    }

    const tickers = response.data.data.tickers;
    if (tickers.length === 0) {
      throw new Error('No results found');
    }

    // Ki·ªÉm tra ticker ƒë·∫ßu ti√™n c√≥ ph·∫£i l√† "FPT" kh√¥ng
    if (tickers[0].ticker !== 'FPT') {
      throw new Error(`Expected first result to be 'FPT', but got '${tickers[0].ticker}'`);
    }

    console.log(`   üìä Found ${tickers.length} results`);
    console.log(`   üéØ First result: ${tickers[0].ticker} - ${tickers[0].name_vi}`);
    console.log(`   üìã Top 3 results: ${tickers.slice(0, 3).map(t => t.ticker).join(', ')}`);
  }

  async testPartialTickerMatch() {
    // Test 2: T√¨m ki·∫øm "VN" - c√°c ticker b·∫Øt ƒë·∫ßu b·∫±ng VN ph·∫£i xu·∫•t hi·ªán tr∆∞·ªõc
    const response = await axios.get(`${BASE_URL}/api/tickers/search?query=VN&limit=10`);
    
    if (response.status !== 200 || !response.data.success) {
      throw new Error('API request failed');
    }

    const tickers = response.data.data.tickers;
    if (tickers.length === 0) {
      throw new Error('No results found');
    }

    // Ki·ªÉm tra c√°c ticker b·∫Øt ƒë·∫ßu b·∫±ng "VN" c√≥ xu·∫•t hi·ªán tr∆∞·ªõc kh√¥ng
    const firstThree = tickers.slice(0, 3);
    const startsWithVN = firstThree.filter(t => t.ticker.startsWith('VN'));
    
    if (startsWithVN.length === 0) {
      throw new Error('Expected tickers starting with "VN" to appear first');
    }

    console.log(`   üìä Found ${tickers.length} results`);
    console.log(`   üéØ First 3 results: ${firstThree.map(t => `${t.ticker} (${t.name_vi})`).join(', ')}`);
    console.log(`   ‚úÖ ${startsWithVN.length}/3 start with "VN"`);
  }

  async testNameSearch() {
    // Test 3: T√¨m ki·∫øm "Petro" - PVS, PLX, v.v. ph·∫£i xu·∫•t hi·ªán
    const response = await axios.get(`${BASE_URL}/api/tickers/search?query=Petro&limit=10`);
    
    if (response.status !== 200 || !response.data.success) {
      throw new Error('API request failed');
    }

    const tickers = response.data.data.tickers;
    console.log(`   üìä Found ${tickers.length} results for "Petro"`);
    
    if (tickers.length > 0) {
      console.log(`   üéØ Results: ${tickers.map(t => `${t.ticker} (${t.name_vi})`).join(', ')}`);
      
      // Ki·ªÉm tra c√≥ ticker n√†o ch·ª©a "petro" trong t√™n kh√¥ng
      const hasNameMatch = tickers.some(t => 
        t.name_vi.toLowerCase().includes('petro') || 
        t.name_en.toLowerCase().includes('petro')
      );
      
      if (!hasNameMatch) {
        throw new Error('Expected to find tickers with "Petro" in name');
      }
    }
  }

  async testMixedSearch() {
    // Test 4: T√¨m ki·∫øm "VIC" - VIC ph·∫£i xu·∫•t hi·ªán ƒë·∫ßu ti√™n, sau ƒë√≥ c√°c k·∫øt qu·∫£ kh√°c
    const response = await axios.get(`${BASE_URL}/api/tickers/search?query=VIC&limit=10`);
    
    if (response.status !== 200 || !response.data.success) {
      throw new Error('API request failed');
    }

    const tickers = response.data.data.tickers;
    if (tickers.length === 0) {
      throw new Error('No results found');
    }

    console.log(`   üìä Found ${tickers.length} results`);
    console.log(`   üéØ All results: ${tickers.map(t => `${t.ticker} (${t.name_vi})`).join(', ')}`);

    // Ki·ªÉm tra th·ª© t·ª± ∆∞u ti√™n
    let exactMatch = -1;
    let startsWithMatch = -1;
    let containsMatch = -1;

    tickers.forEach((ticker, index) => {
      if (ticker.ticker === 'VIC' && exactMatch === -1) {
        exactMatch = index;
      } else if (ticker.ticker.startsWith('VIC') && startsWithMatch === -1) {
        startsWithMatch = index;
      } else if (ticker.ticker.includes('VIC') && containsMatch === -1) {
        containsMatch = index;
      }
    });

    if (exactMatch !== -1 && startsWithMatch !== -1 && exactMatch > startsWithMatch) {
      throw new Error('Exact match should appear before starts-with match');
    }

    console.log(`   ‚úÖ Priority order maintained: exact(${exactMatch}), starts-with(${startsWithMatch}), contains(${containsMatch})`);
  }

  async testSortingWithSearch() {
    // Test 5: T√¨m ki·∫øm v·ªõi sorting - ∆∞u ti√™n v·∫´n ph·∫£i ƒë∆∞·ª£c duy tr√¨
    const response = await axios.get(`${BASE_URL}/api/tickers/search?query=VN&sortBy=market_cap&sortOrder=desc&limit=10`);
    
    if (response.status !== 200 || !response.data.success) {
      throw new Error('API request failed');
    }

    const tickers = response.data.data.tickers;
    if (tickers.length === 0) {
      throw new Error('No results found');
    }

    console.log(`   üìä Found ${tickers.length} results (sorted by market_cap desc)`);
    console.log(`   üéØ First 3: ${tickers.slice(0, 3).map(t => `${t.ticker} (${t.market_cap || 'N/A'})`).join(', ')}`);

    // Ki·ªÉm tra ticker matches v·∫´n xu·∫•t hi·ªán tr∆∞·ªõc
    const firstFive = tickers.slice(0, 5);
    const tickerMatches = firstFive.filter(t => t.ticker.includes('VN'));
    
    if (tickerMatches.length === 0) {
      throw new Error('Expected ticker matches to appear in top results even with sorting');
    }

    console.log(`   ‚úÖ ${tickerMatches.length}/5 top results contain "VN"`);
  }

  async testPerformance() {
    // Test 6: Ki·ªÉm tra performance
    const startTime = Date.now();
    
    const promises = [];
    for (let i = 0; i < 5; i++) {
      promises.push(axios.get(`${BASE_URL}/api/tickers/search?query=FPT&limit=20`));
    }
    
    await Promise.all(promises);
    const endTime = Date.now();
    const avgTime = (endTime - startTime) / 5;

    console.log(`   ‚è±Ô∏è  Average response time: ${avgTime.toFixed(2)}ms`);
    
    if (avgTime > 1000) {
      throw new Error(`Response time too slow: ${avgTime.toFixed(2)}ms`);
    }
  }

  async runAllTests() {
    console.log('üöÄ Starting Search Optimization Tests...\n');

    await this.runTest('Exact Ticker Match Priority', () => this.testExactTickerMatch());
    await this.runTest('Partial Ticker Match Priority', () => this.testPartialTickerMatch());
    await this.runTest('Name Search Functionality', () => this.testNameSearch());
    await this.runTest('Mixed Search Results Order', () => this.testMixedSearch());
    await this.runTest('Sorting with Search Priority', () => this.testSortingWithSearch());
    await this.runTest('Performance Test', () => this.testPerformance());

    // Summary
    console.log('\nüìã Test Summary:');
    console.log('================');
    
    const passed = this.testResults.filter(r => r.status === 'PASSED').length;
    const failed = this.testResults.filter(r => r.status === 'FAILED').length;
    
    this.testResults.forEach(result => {
      const icon = result.status === 'PASSED' ? '‚úÖ' : '‚ùå';
      console.log(`${icon} ${result.test}`);
      if (result.error) {
        console.log(`   Error: ${result.error}`);
      }
    });

    console.log(`\nüéØ Results: ${passed} passed, ${failed} failed`);
    
    if (failed === 0) {
      console.log('üéâ All tests passed! Search optimization is working correctly.');
    } else {
      console.log('‚ö†Ô∏è  Some tests failed. Please check the implementation.');
      process.exit(1);
    }
  }
}

// Ch·∫°y tests
if (require.main === module) {
  const tester = new SearchOptimizationTest();
  tester.runAllTests().catch(error => {
    console.error('‚ùå Test suite failed:', error.message);
    process.exit(1);
  });
}

module.exports = SearchOptimizationTest;
